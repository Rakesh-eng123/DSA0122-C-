{\rtf1\ansi\ansicpg1252\deff0\nouicompat\deflang1033{\fonttbl{\f0\fnil\fcharset0 Calibri;}}
{\*\generator Riched20 10.0.19041}\viewkind4\uc1 
\pard\sa200\sl276\slmult1\b\f0\fs28\lang9                                                            DAY-03\par
\par
Question 09 : \b0 Problem Statement: Implement a simplified e-commerce cart system. You need to write functions to add an item to the cart, calculate the total cost of items in the cart including a fixed tax rate, and remove an item from the cart. Assume each item is represented by a struct containing a name, price, and quantity\b .\par
\par
Sol : \b0 #include <iostream>\par
#include <vector>\par
#include <string>\par
#include <algorithm> \par
using namespace std;\par
\par
struct Item \{\par
    string name;\par
    double price;\par
    int quantity;\par
\};\par
class Cart \{\par
private:\par
    vector<Item> items;\par
    double taxRate;\par
\par
public:\par
    Cart(double tax) : taxRate(tax) \{\}\par
\par
    void addItem(const Item& item) \{\par
        items.push_back(item);\par
    \}\par
    double calculateTotalCost() \{\par
        double total = 0.0;\par
        for (const auto& item : items) \{\par
            total += item.price * item.quantity;\par
        \}\par
        return total * (1 + taxRate);\par
    \}\par
    void removeItem(const string& itemName) \{\par
        items.erase(remove_if(items.begin(), items.end(), [&itemName](const Item& item) \{\par
            return item.name == itemName;\par
        \}), items.end());\par
    \}\par
\};\par
\par
int main() \{\par
    Cart cart(0.1);\par
    Item item1, item2;\par
    cout << "Enter the name, price, and quantity for item 1: ";\par
    cin >> item1.name >> item1.price >> item1.quantity;\par
    cout << "Enter the name, price, and quantity for item 2: ";\par
    cin >> item2.name >> item2.price >> item2.quantity;\par
\par
    cart.addItem(item1);\par
    cart.addItem(item2);\par
    cout << "Total cost including tax: " << cart.calculateTotalCost() << endl;\par
    string itemToRemove;\par
    cout << "Enter the name of the item to remove: ";\par
    cin >> itemToRemove;\par
    cart.removeItem(itemToRemove);\par
    cout << "Total cost including tax after removing an item: " << cart.calculateTotalCost() << endl;\par
\par
    return 0;\par
\}\par
\par
\b O/P : \b0 Enter the name, price, and quantity for item 1: cola 40 2\par
Enter the name, price, and quantity for item 2: sprite 40 3\par
Total cost including tax: 220\par
Enter the name of the item to remove: cola\par
Total cost including tax after removing an item: 132\par
\par
--------------------------------\par
Process exited after 16.05 seconds with return value 0\par
Press any key to continue . . \par
\par
\b Question-10 : \b0  Problem Statement: Develop a set of functions as part of a matrix operations library. Include functions for creating a matrix, adding two matrices, multiplying a matrix by a scalar, and displaying a matrix. Assume matrices are represented by vectors of vectors.\par
\par
\b Sol : \b0 #include <iostream>\par
#include <vector>\par
using namespace std;\par
typedef vector<vector<int>> Matrix;\par
Matrix create_matrix(int rows, int cols) \{\par
    return Matrix(rows, vector<int>(cols, 0));\par
\}\par
Matrix add_matrices(const Matrix& A, const Matrix& B) \{\par
    int rows = A.size();\par
    int cols = A[0].size();\par
    Matrix result = create_matrix(rows, cols);\par
    for (int i = 0; i < rows; ++i) \{\par
        for (int j = 0; j < cols; ++j) \{\par
            result[i][j] = A[i][j] + B[i][j];\par
        \}\par
    \}\par
    return result;\par
\}\par
Matrix scalar_multiply(const Matrix& A, int scalar) \{\par
    int rows = A.size();\par
    int cols = A[0].size();\par
    Matrix result = create_matrix(rows, cols);\par
    for (int i = 0; i < rows; ++i) \{\par
        for (int j = 0; j < cols; ++j) \{\par
            result[i][j] = A[i][j] * scalar;\par
        \}\par
    \}\par
    return result;\par
\}\par
void display_matrix(const Matrix& A) \{\par
    int rows = A.size();\par
    int cols = A[0].size();\par
    for (int i = 0; i < rows; ++i) \{\par
        for (int j = 0; j < cols; ++j) \{\par
            cout << A[i][j] << " ";\par
        \}\par
        cout << endl;\par
    \}\par
\}\par
int main() \{\par
    Matrix A = \{ \{1, 2, 3\}, \{4, 5, 6\}, \{7, 8, 9\} \};\par
    Matrix B = \{ \{9, 8, 7\}, \{6, 5, 4\}, \{3, 2, 1\} \};\par
    cout << "Matrix A:" << endl;\par
    display_matrix(A);\par
    cout << "Matrix B:" << endl;\par
    display_matrix(B);\par
    Matrix sum = add_matrices(A, B);\par
    cout << "Sum of A and B:" << endl;\par
    display_matrix(sum);\par
    Matrix scaled_A = scalar_multiply(A, 2);\par
    cout << "Scaled matrix A by 2:" << endl;\par
    display_matrix(scaled_A);\par
    return 0;\par
\}\par
\par
\b O/P :  \b0 Matrix A:\par
1 2 3 \par
4 5 6 \par
7 8 9 \par
Matrix B:\par
9 8 7 \par
6 5 4 \par
3 2 1 \par
Sum of A and B:\par
10 10 10 \par
10 10 10 \par
10 10 10 \par
Scaled matrix A by 2:\par
2 4 6 \par
8 10 12 \par
14 16 18 \par
\par
\b Question-11 : \b0\par
\b (1) \b0 Write a c++ program to create a class for a bank account with a constructor and a destructor\par
\b Sol :\b0  #include <iostream>\par
#include <string>\par
class BankAccount \{\par
private:\par
    std::string accountNumber;\par
    double balance;\par
public:\par
    BankAccount(const std::string& accNumber, double initialBalance) : accountNumber(accNumber), balance(initialBalance) \{\par
        std::cout << "Bank account created\\n";\par
    \}\par
    ~BankAccount() \{\par
        std::cout << "Bank account destroyed\\n";\par
    \}\par
\};\par
int main() \{\par
    BankAccount account("123456789", 1000.0);\par
    return 0;\par
\}\par
\par
\b O/P : \b0 Bank account created\par
Bank account destroyed\par
\par
\par
\b (2) \b0 : Write a c++ program to create a class for a car with a constructor and a destructor\par
\par
\b Sol\b0  : #include <iostream>\par
#include <string>\par
class Car \{\par
private:\par
    std::string make;\par
    std::string model;\par
    int year;\par
public:\par
    Car(const std::string& carMake, const std::string& carModel, int carYear) : make(carMake), model(carModel), year(carYear) \{\par
        std::cout << "Car object created\\n";\par
    \}\par
    ~Car() \{\par
        std::cout << "Car object destroyed\\n";\par
    \}\par
    void display() const \{\par
        std::cout << "Make: " << make << ", Model: " << model << ", Year: " << year << std::endl;\par
    \}\par
\};\par
int main() \{\par
    Car myCar("Toyota", "Corolla", 2020);\par
    myCar.display();\par
    return 0;\par
\}\par
\par
\b O/P \b0 : Car object created\par
Make: Toyota, Model: Corolla, Year: 2020\par
Car object destroyed\par
\par
\b (3) \b0 : Write a c++ program to create a class for a rectangle with a constructor and a destructor\par
\par
\b Sol : \b0 #include <iostream>\par
class Rectangle \{\par
private:\par
    double length;\par
    double width;\par
public:\par
    Rectangle(double l, double w) : length(l), width(w) \{\par
        std::cout << "Rectangle object created\\n";\par
    \}\par
    ~Rectangle() \{\par
        std::cout << "Rectangle object destroyed\\n";\par
    \}\par
    double area() const \{\par
        return length * width;\par
    \}\par
    double perimeter() const \{\par
        return 2 * (length + width);\par
    \}\par
\};\par
int main() \{\par
    Rectangle myRect(5.0, 3.0);\par
    std::cout << "Area: " << myRect.area() << std::endl;\par
    std::cout << "Perimeter: " << myRect.perimeter() << std::endl;\par
\par
    return 0;\par
\}\par
\par
\b O/P : \b0 Rectangle object created\par
Area: 15\par
Perimeter: 16\par
Rectangle object destroyed\par
\par
\b (4) \b0 : Write a c++ program to create a class for a book with a constructor and a destructor\par
\par
\b Sol : \b0 #include <iostream>\par
#include <string>\par
class Book \{\par
private:\par
    std::string title;\par
    std::string author;\par
    int year;\par
public:\par
    Book(const std::string& title, const std::string& author, int year) : title(title), author(author), year(year) \{\par
        std::cout << "Book object created.\\n";\par
    \}\par
    ~Book() \{\par
        std::cout << "Book object destroyed.\\n";\par
    \}\par
    void display() const \{\par
        std::cout << "Title: " << title << ", Author: " << author << ", Year: " << year << std::endl;\par
    \}\par
\};\par
int main() \{\par
    Book book("The Catcher in the Rye", "J.D. Salinger", 1951);\par
    book.display();\par
\par
    return 0;\par
\}\par
\par
\par
\b O/P : \b0 Book object created.\par
Title: The Catcher in the Rye, Author: J.D. Salinger, Year: 1951\par
Book object destroyed.\par
\par
\par
\b (5) : \b0 Write a c++ program to create a class for student with a constructor and a destructor\par
\par
\b Sol \b0 : #include <iostream>\par
#include <string>\par
class Student \{\par
private:\par
    std::string name;\par
    int age;\par
public:\par
    Student(const std::string& name, int age) : name(name), age(age) \{\par
        std::cout << "Student object created.\\n";\par
    \}\par
    ~Student() \{\par
        std::cout << "Student object destroyed.\\n";\par
    \}\par
    void display() const \{\par
        std::cout << "Name: " << name << ", Age: " << age << std::endl;\par
    \}\par
\};\par
int main() \{\par
    Student student("John Doe", 20);\par
    student.display();\par
\par
    return 0;\par
\}\par
\par
\b O/P :\b0  Student object created.\par
Name: John Doe, Age: 20\par
Student object destroyed.\par
\fs22\par
}
 